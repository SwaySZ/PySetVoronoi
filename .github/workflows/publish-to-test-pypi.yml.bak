name: Publish PySetVoronoi to PyPI and TestPyPI

on: 
  push:
      branches: [ci]



jobs:
  build-n-publish:
    name: Wheel PySetVoronoi 
    #runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        python: [3.7]
        os: [windows-latest] #[ubuntu-latest,macos-latest,windows-latest]
            
          #   cibw-arch: macosx_universal2
          # - runs-on: windows-latest
          #   cibw-arch: win_amd64
          # - runs-on: windows-latest
          #   cibw-arch: win32
          #   python-arch: x86
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
   
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: ${{matrix.python}}
        architecture: ${{ matrix.python-arch }}

    - uses: msys2/setup-msys2@v2
      with:
        install: >-
          cmake
          gcc
          python3-pip
      if: matrix.os == 'windows-latest'

    - name: Windows
      shell: msys2 {0}
      run: |
          uname -a
          which cmake
      if: matrix.os == 'windows-latest'

    # - name: Setup CMake
    #   uses: jwlawson/actions-setup-cmake@v1.8
    #   with:
    #     cmake-version: '3.12.x'

    # - name: Install cibuildwheel
    #   run: python -m pip install cibuildwheel==1.10.0 twine

    # - name: Install system dependencies- MacOS
    #   run: |
    #       brew install Homebrew/core/libomp
    #   if: matrix.runs-on == 'macos-latest'

    # - name: Configure cibuildwheel
    #   shell: bash
    #   run: |
    #     CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
    #     CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
    #     echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
    #     echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
    #     echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT_COMMON" >> $GITHUB_ENV
    #     echo "CIBW_ENVIRONMENT_LINUX=$CIBW_ENVIRONMENT_COMMON PIP_ONLY_BINARY='numpy'" >> $GITHUB_ENV
    #     echo "CIBW_ENVIRONMENT_MACOS=$CIBW_ENVIRONMENT_COMMON MACOSX_DEPLOYMENT_TARGET=10.9 CMAKE_OSX_ARCHITECTURES=\"$CMAKE_OSX_ARCHITECTURES\"" >> $GITHUB_ENV
    #     echo "CIBW_BEFORE_ALL_LINUX=pip install cmake && ln -s \$(which cmake) /usr/local/bin/cmake " >> $GITHUB_ENV
    #     echo "CIBW_BEFORE_ALL_WINDOWS=$CIBW_BEFORE_ALL_COMMON --config Release" >> $GITHUB_ENV
    #     echo "CIBW_BEFORE_ALL_MACOS=brew install Homebrew/core/libomp && ln -s /usr/local/Cellar/libomp/11.1.0/ /usr/local/opt/libomp && ls /usr/local/opt/libomp " >> $GITHUB_ENV


    # - name: Build wheel
    #   run: python -m cibuildwheel --output-dir wheelhouse
    #   env:
    #     CIBW_BUILD: "cp36-*" #"{cp,pp}3*-*"
    #     CIBW_SKIP: "*-win32 *-manylinux_i686"


    # - name: Create Build Environment
    #   run: cmake -E make_directory ${{github.workspace}}/build

    # - name: Configure CMake for unix-like os
    #   shell: bash
    #   working-directory: ${{github.workspace}}/build
    #   run: >-
    #       cmake ${GITHUB_WORKSPACE}/src -DCMAKE_BUILD_TYPE=$BUILD_TYPE 
    #       -DPython_ADDITIONAL_VERSIONS=${{matrix.python}}

    # - name: Build
    #   working-directory: ${{github.workspace}}/build
    #   run: |
    #        make
    #        make install
    # - name: Copy to dist
    #   working-directory: ${{github.workspace}}/
    #   run: |
    #     mkdir dist
    #     cp install/lib/* dist/
    - name: Install system dependencies- MacOS
      run: |
          brew install Homebrew/core/libomp
          ln -s /usr/local/Cellar/libomp/11.1.0/ /usr/local/opt/libomp
          ls  /usr/local/opt/libomp
      if: matrix.os == 'macos-latest'

    - name: Build for unix-like os
      run: |
          pip3 install wheel
          python3 setup.py bdist_wheel --universal
      if: matrix.os != 'windows-latest'

    - name: Build
      shell: msys2 {0}
      run: |
          pip3 install wheel
          python3 setup.py bdist_wheel --universal
      if: matrix.os == 'windows-latest'
    # - name: Install pypa/build
    #   run: python3 -m pip install build --user

    # - name: Build a binary wheel and a source tarball
    #   run: python3 -m build --wheel --outdir wheelhouse/

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.whl

    # - name: Publish to TestPyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #     repository_url: https://test.pypi.org/legacy/
    #     packages_dir: dist/
    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags')
    #   uses: pypa/gh-action-pypi-publish@master
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}